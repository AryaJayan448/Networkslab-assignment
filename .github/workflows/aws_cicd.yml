name: Build and Deploy Dockerized Python App on EC2

on:
  push:
    branches:
      - main

env:
  EC2_USER: "ec2-user"
  EC2_HOST: "54.229.110.81"
  SSH_KEY: "${{ secrets.EC2_SSH_KEY }}"
  DOCKER_IMAGE: "my-python-app:${{ github.sha }}"
  CONTAINER_NAME: "my-python-container"
  HOST_PORT: 8080
  CONTAINER_PORT: 80

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Prepare deployment package
        run: |
          echo " Starting deployment package preparation..."
          rm -rf app.zip app/
          zip -r app.zip ./* \
            -x ".git" \
            -x ".github" \
            -x ".env" \
            -x "README.md"

      - name: Copy files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.SSH_KEY }}
          source: "app.zip"
          target: "~/"

      - name: Deploy on EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.SSH_KEY }}
          script: |
            echo " Starting deployment process..."
            
            # Stop and remove existing container
            echo "Stopping existing containers..."
            docker stop ${{ env.CONTAINER_NAME }} 2>/dev/null || true
            docker rm ${{ env.CONTAINER_NAME }} 2>/dev/null || true
            
            # Clean up old images
            echo "Cleaning up old images..."
            docker system prune -f
            
            # Extract application files
            echo "Extracting application files..."
            rm -rf ~/app
            unzip -o app.zip -d ~/app
            cd ~/app/docker/
            
            # Debug: Show Dockerfile contents
            echo " Dockerfile contents:"
            cat Dockerfile
            
            # Build new image
            echo "Building Docker image..."
            docker build -t ${{ env.DOCKER_IMAGE }} . --no-cache
            
            # Debug: List images
            echo "Available images:"
            docker images
            
            # Start new container
            echo "Starting container..."
            docker run -d \
              --name ${{ env.CONTAINER_NAME }} \
              --restart unless-stopped \
              -p ${{ env.HOST_PORT }}:${{ env.CONTAINER_PORT }} \
              ${{ env.DOCKER_IMAGE }}
            
            # Debug: Show container logs
            echo "Container logs:"
            docker logs ${{ env.CONTAINER_NAME }}